// Code generated by "enumer -type=SubjectType -json"; DO NOT EDIT.

package service

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SubjectTypeName = "UserApiKeyServiceAccount"

var _SubjectTypeIndex = [...]uint8{0, 4, 10, 24}

const _SubjectTypeLowerName = "userapikeyserviceaccount"

func (i SubjectType) String() string {
	if i < 0 || i >= SubjectType(len(_SubjectTypeIndex)-1) {
		return fmt.Sprintf("SubjectType(%d)", i)
	}
	return _SubjectTypeName[_SubjectTypeIndex[i]:_SubjectTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SubjectTypeNoOp() {
	var x [1]struct{}
	_ = x[User-(0)]
	_ = x[ApiKey-(1)]
	_ = x[ServiceAccount-(2)]
}

var _SubjectTypeValues = []SubjectType{User, ApiKey, ServiceAccount}

var _SubjectTypeNameToValueMap = map[string]SubjectType{
	_SubjectTypeName[0:4]:        User,
	_SubjectTypeLowerName[0:4]:   User,
	_SubjectTypeName[4:10]:       ApiKey,
	_SubjectTypeLowerName[4:10]:  ApiKey,
	_SubjectTypeName[10:24]:      ServiceAccount,
	_SubjectTypeLowerName[10:24]: ServiceAccount,
}

var _SubjectTypeNames = []string{
	_SubjectTypeName[0:4],
	_SubjectTypeName[4:10],
	_SubjectTypeName[10:24],
}

// SubjectTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SubjectTypeString(s string) (SubjectType, error) {
	if val, ok := _SubjectTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SubjectTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SubjectType values", s)
}

// SubjectTypeValues returns all values of the enum
func SubjectTypeValues() []SubjectType {
	return _SubjectTypeValues
}

// SubjectTypeStrings returns a slice of all String values of the enum
func SubjectTypeStrings() []string {
	strs := make([]string, len(_SubjectTypeNames))
	copy(strs, _SubjectTypeNames)
	return strs
}

// IsASubjectType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SubjectType) IsASubjectType() bool {
	for _, v := range _SubjectTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SubjectType
func (i SubjectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SubjectType
func (i *SubjectType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SubjectType should be a string, got %s", data)
	}

	var err error
	*i, err = SubjectTypeString(s)
	return err
}
