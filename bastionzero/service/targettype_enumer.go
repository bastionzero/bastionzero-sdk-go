// Code generated by "enumer -type=TargetType -json"; DO NOT EDIT.

package service

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _TargetTypeName = "BzeroClusterDynamicAccessConfigWebDb"

var _TargetTypeIndex = [...]uint8{0, 5, 12, 31, 34, 36}

const _TargetTypeLowerName = "bzeroclusterdynamicaccessconfigwebdb"

func (i TargetType) String() string {
	if i < 0 || i >= TargetType(len(_TargetTypeIndex)-1) {
		return fmt.Sprintf("TargetType(%d)", i)
	}
	return _TargetTypeName[_TargetTypeIndex[i]:_TargetTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TargetTypeNoOp() {
	var x [1]struct{}
	_ = x[Bzero-(0)]
	_ = x[Cluster-(1)]
	_ = x[DynamicAccessConfig-(2)]
	_ = x[Web-(3)]
	_ = x[Db-(4)]
}

var _TargetTypeValues = []TargetType{Bzero, Cluster, DynamicAccessConfig, Web, Db}

var _TargetTypeNameToValueMap = map[string]TargetType{
	_TargetTypeName[0:5]:        Bzero,
	_TargetTypeLowerName[0:5]:   Bzero,
	_TargetTypeName[5:12]:       Cluster,
	_TargetTypeLowerName[5:12]:  Cluster,
	_TargetTypeName[12:31]:      DynamicAccessConfig,
	_TargetTypeLowerName[12:31]: DynamicAccessConfig,
	_TargetTypeName[31:34]:      Web,
	_TargetTypeLowerName[31:34]: Web,
	_TargetTypeName[34:36]:      Db,
	_TargetTypeLowerName[34:36]: Db,
}

var _TargetTypeNames = []string{
	_TargetTypeName[0:5],
	_TargetTypeName[5:12],
	_TargetTypeName[12:31],
	_TargetTypeName[31:34],
	_TargetTypeName[34:36],
}

// TargetTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TargetTypeString(s string) (TargetType, error) {
	if val, ok := _TargetTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TargetTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TargetType values", s)
}

// TargetTypeValues returns all values of the enum
func TargetTypeValues() []TargetType {
	return _TargetTypeValues
}

// TargetTypeStrings returns a slice of all String values of the enum
func TargetTypeStrings() []string {
	strs := make([]string, len(_TargetTypeNames))
	copy(strs, _TargetTypeNames)
	return strs
}

// IsATargetType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TargetType) IsATargetType() bool {
	for _, v := range _TargetTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TargetType
func (i TargetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TargetType
func (i *TargetType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TargetType should be a string, got %s", data)
	}

	var err error
	*i, err = TargetTypeString(s)
	return err
}
