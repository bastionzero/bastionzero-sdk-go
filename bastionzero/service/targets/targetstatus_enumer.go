// Code generated by "enumer -type=TargetStatus -json"; DO NOT EDIT.

package targets

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _TargetStatusName = "NotActivatedOfflineOnlineTerminatedErrorRestarting"

var _TargetStatusIndex = [...]uint8{0, 12, 19, 25, 35, 40, 50}

const _TargetStatusLowerName = "notactivatedofflineonlineterminatederrorrestarting"

func (i TargetStatus) String() string {
	if i < 0 || i >= TargetStatus(len(_TargetStatusIndex)-1) {
		return fmt.Sprintf("TargetStatus(%d)", i)
	}
	return _TargetStatusName[_TargetStatusIndex[i]:_TargetStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TargetStatusNoOp() {
	var x [1]struct{}
	_ = x[NotActivated-(0)]
	_ = x[Offline-(1)]
	_ = x[Online-(2)]
	_ = x[Terminated-(3)]
	_ = x[Error-(4)]
	_ = x[Restarting-(5)]
}

var _TargetStatusValues = []TargetStatus{NotActivated, Offline, Online, Terminated, Error, Restarting}

var _TargetStatusNameToValueMap = map[string]TargetStatus{
	_TargetStatusName[0:12]:       NotActivated,
	_TargetStatusLowerName[0:12]:  NotActivated,
	_TargetStatusName[12:19]:      Offline,
	_TargetStatusLowerName[12:19]: Offline,
	_TargetStatusName[19:25]:      Online,
	_TargetStatusLowerName[19:25]: Online,
	_TargetStatusName[25:35]:      Terminated,
	_TargetStatusLowerName[25:35]: Terminated,
	_TargetStatusName[35:40]:      Error,
	_TargetStatusLowerName[35:40]: Error,
	_TargetStatusName[40:50]:      Restarting,
	_TargetStatusLowerName[40:50]: Restarting,
}

var _TargetStatusNames = []string{
	_TargetStatusName[0:12],
	_TargetStatusName[12:19],
	_TargetStatusName[19:25],
	_TargetStatusName[25:35],
	_TargetStatusName[35:40],
	_TargetStatusName[40:50],
}

// TargetStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TargetStatusString(s string) (TargetStatus, error) {
	if val, ok := _TargetStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TargetStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TargetStatus values", s)
}

// TargetStatusValues returns all values of the enum
func TargetStatusValues() []TargetStatus {
	return _TargetStatusValues
}

// TargetStatusStrings returns a slice of all String values of the enum
func TargetStatusStrings() []string {
	strs := make([]string, len(_TargetStatusNames))
	copy(strs, _TargetStatusNames)
	return strs
}

// IsATargetStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TargetStatus) IsATargetStatus() bool {
	for _, v := range _TargetStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TargetStatus
func (i TargetStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TargetStatus
func (i *TargetStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TargetStatus should be a string, got %s", data)
	}

	var err error
	*i, err = TargetStatusString(s)
	return err
}
